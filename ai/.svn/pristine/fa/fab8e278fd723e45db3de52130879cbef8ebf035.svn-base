package kr.or.ddit.speech;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.ibm.watson.developer_cloud.service.security.IamOptions;
import com.ibm.watson.developer_cloud.speech_to_text.v1.SpeechToText;
import com.ibm.watson.developer_cloud.speech_to_text.v1.model.RecognizeOptions;
import com.ibm.watson.developer_cloud.speech_to_text.v1.model.SpeechRecognitionResult;
import com.ibm.watson.developer_cloud.speech_to_text.v1.model.SpeechRecognitionResults;
import com.ibm.watson.developer_cloud.speech_to_text.v1.websocket.BaseRecognizeCallback;

/**
 * @author 이진희
 * @since 2019. 11. 25.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 *
 * --------     --------    ----------------------
 * 2019. 11. 25.      이진희       최초작성
 * Copyright (c) 2019 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/speech")
public class SpeechToTextController {
	
	private static final String API_KEY = "sZSSUCAo0X8fW6pR_hR9ZKYpLYxK_rZC--rrx_29sMuS";
	private static final String URL = "https://stream.watsonplatform.net/speech-to-text/api";
	
	private SpeechToText service; // SpeechToText 서비스
	
	private RecognizeOptions options; // 서비스 옵션
	
	private BaseRecognizeCallback callback; //서비스 콜백
	
	@RequestMapping(value="speechSearch.do",method = RequestMethod.POST, produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public String speech(@RequestPart(required=false,name="voice") MultipartFile voice) throws FileNotFoundException, LineUnavailableException {
		
		System.out.println(voice);
		
		//서비스 설정
		IamOptions iamOption = new IamOptions.Builder()
				 .apiKey(API_KEY)
				 .build();

		service = new SpeechToText(iamOption);

		service.setEndPoint(URL);
		
		//서비스헤더설정
		Map<String, String> headers = new HashMap<String, String>();
		
		// true는 허용, false는 불허
		headers.put("X-Watson-Learning-Opt-Out", "false");
		
		service.setDefaultHeaders(headers);
		
		//이부분에서 녹음한파일듣고 
		List<String> keywords = new ArrayList<>();
		keywords.add("밀알레르기");
		keywords.add("검색");
		
		int sampleRate = 7000;
		AudioFormat format = new AudioFormat(sampleRate, 16, 1, true, false);
		DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
		
		if(!AudioSystem.isLineSupported(info)) {
			System.out.println("Line not supported");
			System.exit(0);
		}
		
		TargetDataLine line = (TargetDataLine) AudioSystem.getLine(info);
		line.open(format);
		line.start();
		
		AudioInputStream audio = new AudioInputStream(line);
		
		options = new RecognizeOptions.Builder()
				  .model("ko-KR_BroadbandModel")
				  .audio(audio) // 음성파일 이부분에 마이크로 말한 파일이 들어가야해 
				  .contentType("audio/flac")
				  .interimResults(true).maxAlternatives(3)
				  .keywords(keywords)
				  .keywordsThreshold(0.5f)
				  .build();
		
		//서비스 실행 후에 처리할 내용을 지정해 준다.
		callback = new BaseRecognizeCallback() {
			// 문자변환시 처리할 내용
			@Override
			public void onTranscription(SpeechRecognitionResults speechResults) {
				for(SpeechRecognitionResult srResult:speechResults.getResults()){
					String text = srResult.getAlternatives().get(0).getTranscript();
					System.out.println(text);
				}
			}
			// 연결 종료시 처리할 내용
			@Override
			public void onDisconnected() { 
				System.exit(0);
			}
		};
		
		
		service.recognizeUsingWebSocket(options, callback);
		
		System.out.println("controller");
		return null;
	}
	
}
