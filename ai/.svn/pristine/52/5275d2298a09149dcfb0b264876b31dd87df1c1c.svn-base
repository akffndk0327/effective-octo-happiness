package kr.or.ddit.advertise.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.advertise.dao.IAdAttatchDAO;
import kr.or.ddit.advertise.dao.IAdvertiseDAO;
import kr.or.ddit.enums.ServiceResult;
import kr.or.ddit.exception.CommonException;
import kr.or.ddit.vo.AdattatchVO;
import kr.or.ddit.vo.AdvertiseVO;
import kr.or.ddit.vo.PagingInfoVO;

@Service
public class AdvertiseServiceImpl implements IAdvertiseService {
	@Inject
	IAdvertiseDAO adDAO;
	
	@Inject
	IAdAttatchDAO adattDAO;
	
	File saveFolder = new File("d:/saveFiles");
	private int processAttatch(AdvertiseVO advertise) {
		List<AdattatchVO> adattatchList = advertise.getAdattatchList();
		int cnt = 0;
		if(adattatchList!=null && adattatchList.size()>0) {
			cnt = adattDAO.insertAttatches(advertise);
			for(int i = 0; i<adattatchList.size(); i++) {
//				if(1==1) throw new RuntimeException("강제 발생 예외");
				try {
					AdattatchVO adattatch = adattatchList.get(i);
					adattatch.saveFile(saveFolder);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return cnt;
	}
	
	private int deleteAttatch(AdvertiseVO advertise) {
		Integer[] delAtts = advertise.getDelAdAttaches();
		int cnt = 0;
		if(delAtts!=null && delAtts.length>0) {
			for(int delNo : delAtts) {
				AdattatchVO attatch = adattDAO.selectAttatch(delNo);
				FileUtils.deleteQuietly(
						new File(saveFolder, attatch.getAdattSavename()));
			}
			cnt  += adattDAO.deleteAttatches(advertise);
		}
		return cnt;
	}

	@Override
	public int retrieveAdCount(PagingInfoVO<AdvertiseVO> pagingVO) {
		return adDAO.selectAdCount(pagingVO);
	}

	@Override
	public List<AdvertiseVO> retrieveAdList(PagingInfoVO<AdvertiseVO> pagingVO) {
		return adDAO.selectadAdList(pagingVO);
	}

	@Override
	public AdvertiseVO retrieveAd(AdvertiseVO advertise) {
		AdvertiseVO saveAd = adDAO.selectAd(advertise);
		if(saveAd == null)  throw new CommonException(saveAd.getAdId()+", 해당 글이 없음.");
		return saveAd;
	}

	@Override
	public ServiceResult insertAd(AdvertiseVO advertise) {
		int cnt = adDAO.insertAd(advertise);
		cnt = processAttatch(advertise);
		ServiceResult result= null;
		if(cnt>0) result = ServiceResult.OK;
		else result = ServiceResult.FAILED;
		return result;
	}
	
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ServiceResult modifyAd(AdvertiseVO advertise) {
		AdvertiseVO saveAd = retrieveAd(advertise);
		ServiceResult result = null;
		if(saveAd.getMemId().equals(advertise.getMemId())) {
			int cnt = adDAO.updateAd(advertise);
			cnt += processAttatch(advertise);
			cnt += deleteAttatch(advertise);
			if(cnt>0) {
				result = ServiceResult.OK;
			}else {
				result = ServiceResult.FAILED;
			}
		}
		return result;
	}
	
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ServiceResult removeAd(AdvertiseVO advertise) {
		AdvertiseVO saveAd = retrieveAd(advertise);
		ServiceResult result = null;
		if(saveAd.getMemId().equals(advertise.getMemId())){
			List<AdattatchVO> attatchList = saveAd.getAdattatchList();
			int cnt = 0;
			if(attatchList !=null && attatchList.size()>0) {
				// meta delete
				cnt += adattDAO.deleteAttatches(advertise);
			}
			//board delete
		}
		return result;
	}

	@Override
	public ServiceResult updateAdHit(int adId) {
		int cnt = adDAO.updateAdHit(new AdvertiseVO(adId));
		ServiceResult result = null;
		if(cnt>0) result = ServiceResult.OK;
		else result = ServiceResult.FAILED;
		return result;
	}

	@Override
	public AdattatchVO downloadAttatch(int what) {
		// TODO Auto-generated method stub
		return null;
	}

	
	
	
}
