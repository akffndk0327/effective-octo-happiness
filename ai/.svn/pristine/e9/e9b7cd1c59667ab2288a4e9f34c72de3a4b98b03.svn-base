package kr.or.ddit.correctboard.controller;

import java.io.File;
import java.lang.ProcessBuilder.Redirect;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.ServletContext;
import javax.validation.Valid;

import org.apache.ibatis.annotations.Insert;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.hints.InsertHint;
import kr.or.ddit.correctboard.service.ICorrectBoardService;
import kr.or.ddit.enums.ServiceResult;
import kr.or.ddit.member.dao.IMemberDAO;
import kr.or.ddit.member.service.IMemberService;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.CorrectAttatchVO;
import kr.or.ddit.vo.CorrectBoardVO;
import kr.or.ddit.vo.MemberVO;

@Controller
@RequestMapping("/correct/correctInsert.do")
public class CorrectInsertController {

	@Inject
	ICorrectBoardService service;
	
	@Inject
	IMemberService memservice;
	
	@Inject
	IMemberDAO dao;
	
	@Inject
	WebApplicationContext container;
	ServletContext application;
	
	@PostConstruct
	public void init() {
		application = container.getServletContext();
	}

	@RequestMapping(method = RequestMethod.GET)
	public String create(Model model,@ModelAttribute("correct") CorrectBoardVO correct) {
		
		List<CodeVO> codeList = service.selectCodeList();
		model.addAttribute("codeList", codeList);
		
		List<CodeVO> boardList = service.selectBoardList();
		model.addAttribute("boardList", boardList);
		
		return "correct/correctForm";
	}

	@RequestMapping(method = RequestMethod.POST)
	public String createCorrect(
			@Validated(InsertHint.class) @ModelAttribute("correct") CorrectBoardVO correct, Errors errors, Model model,
			RedirectAttributes redirect) {
		
		boolean valid = !errors.hasErrors();
		String viewName = null;
		String message = null;
		
		if(valid) {
			ServiceResult result = service.createCorrectBoard(correct);
			switch (result) {
			case OK:
				if(correct.getCorrectParent()!=null) {
					sendEmail(correct);					
				}else {
					message = "이메일전송을 실패하였습니다.";
					model.addAttribute("fail", message);
				}
				message = "추가 성공";
				viewName = "redirect:/correct/correctView.do?correctNo="+correct.getCorrectNo();
				redirect.addFlashAttribute("success", message);
				break;
			default:
				message = "서버오류";
				viewName = "correct/correctForm";
				model.addAttribute("fail", message);
				break;
			}
		}else {
			viewName = "correct/correctForm";
		}
		
		return viewName;
	}
	
	@RequestMapping
	public void sendEmail(CorrectBoardVO correct) {
		
		//답글에서 원글의 아이디를 가지고 와서 그 아이디를 가지고 있는 게시판 작성자와 내용을 이메일로 전송한다.
		int correctParent = correct.getCorrectParent();
		
		//회원이 작성한 게시글 내용 correct2
		CorrectBoardVO correct2 = service.selectCorrect(new CorrectBoardVO(correctParent));
		String userId = correct2.getMemId();
		
		MemberVO mem = dao.selectAccount(userId);
		MemberVO user = memservice.retrieveMember(mem);
		System.out.println(user);
		//작성자이름
		String userName = user.getMemName();
		
		//작성자이메일
		String userMail = user.getMemMail();
		
		//작성제목 
		String userTitle = correct2.getCorrectTitle();
		
		//관리자가 작성한 답글내용
		String adminCnt = correct.getCorrectContent();
		
		List<CorrectAttatchVO> attatch = correct.getAttatchList();
		String file = null;
		String fileName =  null;
		if(!attatch.isEmpty()) {
			for(CorrectAttatchVO att :attatch) {
				file = att.getCoattSavename();
				fileName = att.getCoattName();
			}
			
		}
		
		
		String host = "smtp.naver.com"; //네이버일경우
		 
		final String username="pojyd052"; //네이버아이디
		final String password="wlsl2012030083"; //네이버비밀번호
		
		Properties props = System.getProperties(); //정보를 달기위한 객체 생성
		
		//SMTP서버정보설정
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.auth", "true");
		
		//Session 생성
		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		});
	
		
		// Compose the message
		try {
			MimeMessage message = new MimeMessage(session);
			message.setFrom(new InternetAddress(username));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(userMail));
			
			File saveFolder = new File("d:/saveFiles");
			String filename = saveFolder.getAbsolutePath();
	        BodyPart messageBodyPart = new MimeBodyPart();
	        BodyPart messageBodyPart2 = new MimeBodyPart();
	        Multipart multipart = new MimeMultipart();
	        
	        if(filename!=null && file!= null) {
	        	DataSource source = new FileDataSource(filename+"/"+file);
		        messageBodyPart.setDataHandler(new DataHandler(source));
		        messageBodyPart.setFileName(fileName);
		        multipart.addBodyPart(messageBodyPart);
	        }
	        
	        
			// Subject 제목
			message.setSubject("안녕하세요.AI(Allergy Information)입니다. ");

			

			// Text 내용
			messageBodyPart2.setText(userName+"님 저희 AI홈페이지를 이용해주셔서 감사합니다. "+ userName +" 님이 의뢰해주신 "+
					userTitle+" 에 대한 부분을 수정하였습니다. 저희의 답변은 "+ adminCnt +"이면 앞으로도 많은 관심과 지적 부탁드립니다. ");
			multipart.addBodyPart(messageBodyPart2);
			
			message.setContent(multipart);
			
			// send the message
			Transport.send(message);
			System.out.println("message sent successfully...");
//			MyAlert.info("결제내역이 이메일로 전송되었습니다.");

		} catch (MessagingException e) {
			e.printStackTrace();
		}
		
		
		
	}
	
	
}


















































