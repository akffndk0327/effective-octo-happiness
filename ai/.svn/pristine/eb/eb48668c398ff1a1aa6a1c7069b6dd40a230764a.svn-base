package kr.or.ddit.prod.controller;

import java.io.IOException;
import java.util.List;

import javax.inject.Inject;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.enums.ServiceResult;
import kr.or.ddit.prod.service.IProdService;
import kr.or.ddit.vo.LprodVO;
import kr.or.ddit.vo.Order2VO;
import kr.or.ddit.vo.ProdVO;
import kr.or.ddit.vo.ReviewVO;

/**
 * @author 최서희
 * @since 2019. 11. 6.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2019. 11. 6.      최서희       최초작성
 * 2019. 11. 7.      최서희       리뷰등록 기능 구현
 * Copyright (c) 2019 by DDIT All right reserved
 * </pre>
 */
@Controller
public class ProdInsert {
	@Inject IProdService service;

	//기업회원 등록 폼
	@RequestMapping(value="/prod/prodInsert.do")
	public String prodEmpForm(Model model) {
		List<LprodVO> lprodList = service.retrieveLprodAList();
		model.addAttribute("lprodList", lprodList);
		return "prod/prodEmpForm";
	}
	//관리자 등록 폼
	@RequestMapping(value="/prod/prodAdminInsert.do")
	public String prodAdminForm() {
		return "prod/prodAdminForm";
	}
	
	//기업회원 등록 프로세스
	@RequestMapping(value="/prod/prodInsert.do", method=RequestMethod.POST)
	public String createEmpProd(
			@Valid @ModelAttribute("prod") ProdVO prod,
			Errors errors,
			RedirectAttributes redirect,
			Model model
			) throws IOException {
		boolean valid = !errors.hasErrors();
		String viewName = null;
		String message = null;
		model.addAttribute("message", message);
		
		//blob저장
		prod.setProd_image(prod.getProdImage());
		//metaData저장
		prod.setProd_file(prod.getAttFile());
		
		if (valid) {
			ServiceResult result = service.createProd(prod);
			switch (result) {
			case FAILED:
				message = "서버 오류";
				List<LprodVO> lprodList = service.retrieveLprodAList();
				model.addAttribute("lprodList", lprodList);
				viewName = "prod/prodEmpForm";
				break;
			default:
				message = "상품 등록 성공";
				redirect.addFlashAttribute("message", message);
				viewName = "redirect:/prod/prodList.do";
				break;
			}

		} else {
			message = "상품 등록 실패";
			List<LprodVO> lprodList = service.retrieveLprodAList();
			model.addAttribute("lprodList", lprodList);
			viewName = "prod/prodEmpForm";
		}
		return viewName;
	}
	
	
	//관리자 등록(업데이트)
	@RequestMapping(value="/prod/prodAdminInsert.do", method=RequestMethod.POST)
	public String createAdminProd(
			@Valid @ModelAttribute("prod") ProdVO prod,
			Errors errors,
			RedirectAttributes redirect,
			Model model
			) {
		boolean valid = !errors.hasErrors();
		String viewName = null;
		String message = null;
		
		if (valid) {
			ServiceResult result = service.createProd(prod);
			switch (result) {
			case FAILED:
				message = "서버 오류";
				model.addAttribute("message", message);
				viewName = "prod/prodAdminForm";
				break;
			default:
				message = "글 게시 성공";
				redirect.addFlashAttribute("message", message);
				viewName = "redirect:/prod/prodView.do?what="+prod.getProdId();
				break;
			}

		} else {
			viewName = "prod/prodAdminForm";
		}
		return viewName;
	}
	
	//(제품을 구매한) 일반회원 상품평 등록
	@RequestMapping(value="/review/reviewInsert.do", method=RequestMethod.POST)
	public String createReview(
			@Valid @ModelAttribute("review") ReviewVO review,
			@RequestParam(required=true) String memId,
			Errors errors,
			RedirectAttributes redirect,
			Model model
			) {
		boolean valid = !errors.hasErrors();
		String viewName = null;
		String message = null;
		
		Order2VO order = new Order2VO();
		order.setMemId(memId);
		order.setProdId(review.getProdId());
		
		if (valid) {
			ServiceResult result = service.createReview(review, order);
			switch (result) {
			case FAILED:
				message = "서버 오류";
				model.addAttribute("message", message);
				viewName = "prod/prodView.do?what="+review.getProdId();
				break;
			default:
				message = "글 게시 성공";
				redirect.addFlashAttribute("message", message);
				viewName = "redirect:/prod/prodView.do?what="+review.getProdId();
				break;
			}

		} else {
			viewName = "prod/prodView.do?what="+review.getProdId();
		}
		return viewName;
		
	}
	
}
