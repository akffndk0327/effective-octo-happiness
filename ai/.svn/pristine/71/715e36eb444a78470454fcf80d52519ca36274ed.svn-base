package kr.or.ddit.member.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.inject.Inject;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerFontProvider;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.css.StyleAttrCSSResolver;
import com.itextpdf.tool.xml.html.CssAppliers;
import com.itextpdf.tool.xml.html.CssAppliersImpl;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;

import kr.or.ddit.addrChart.service.IMemChartService;
import kr.or.ddit.enums.ServiceResult;
import kr.or.ddit.member.service.IMemberService;
import kr.or.ddit.othersallergies.service.IOthersAllergiesService;
import kr.or.ddit.vo.AllergyVO;
import kr.or.ddit.vo.MemberVO;
/**
 * @author 허민지
 * @since 2019. 11. 6.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                    수정자               수정내용
 * --------     --------    ----------------------
 * 2019. 11. 6.     허민지       최초작성
 * 2019. 11. 9      허민지       create 추가
 * 2019. 11. 21     이진희       회원가입시 report 전송 
 * Copyright (c) 2019 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/member")
public class MemberInsertController {

	@Inject
	IMemberService service;
	
	@Inject
	IMemChartService memChartService;
	
	@Inject
	IOthersAllergiesService otherService;
	
	//일반회원가입
	@RequestMapping(value="signUp.do", method=RequestMethod.GET)
	public String selectAllergyList(Model model){
		List<String> allergy = service.retrieveListAllergy();
		List<String> symtom = service.retrieveSytomsList();
		model.addAttribute("allergy", allergy);
		model.addAttribute("symtom", symtom);
		return "member/memberForm";
	}
	
	
	@RequestMapping(value="memberInsert.do",method=RequestMethod.POST)
	public String createMember(
			@Valid @ModelAttribute("member") MemberVO member,
			Errors errors,
			Model model,
			HttpServletRequest req,
			RedirectAttributes redirect
			) throws DocumentException, IOException {
		
		boolean valid = !errors.hasErrors();
		String msg = null;
		String viewName = "member/memberForm";
		if(valid) {
			ServiceResult result = service.createMember(member);
			switch(result) {
			case PKDUPLICATED:
				msg = "아이디 중복";
				viewName = "member/memberForm";
				break;
			case FAILED:
				msg = "서버오류";
				viewName = "member/memberForm";
				break;
			default :
				msg = "회원가입 완료";
				pdfMade(req,member);
				sendEmail(member);
				viewName = "redirect:/";
				
				break;
			}
		} else {
			viewName = "member/memberForm";
		}
		redirect.addAttribute("success", msg);
		return viewName;
	}

	@ResponseBody
    @RequestMapping(value ="VerifyRecaptcha", method = RequestMethod.POST)
    public int VerifyRecaptcha(HttpServletRequest request) {
        VerifyRecaptcha.setSecretKey("6LflpcMUAAAAAAX1dkpNRvOFla2QUM0mvLmkow4m");
        String gRecaptchaResponse = request.getParameter("recaptcha");
        System.out.println(gRecaptchaResponse);
        //0 = 성공, 1 = 실패, -1 = 오류
        try {
            if(VerifyRecaptcha.verify(gRecaptchaResponse))
                return 0;
            else return 1;
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
    }
   
 	public void pdfMade(HttpServletRequest req,MemberVO member) throws DocumentException, IOException {
 	   	
   		// Document 생성
   		Document document = new Document(PageSize.A4, 50, 50, 50, 50); // 용지 및 여백 설정
   		
   		File saveFolder = new File("D:/saveFiles");
		String filename = saveFolder.getAbsolutePath();
   		
		// PdfWriter 생성
   		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filename + "/"+member.getMemName() +" 회원님 PDF.pdf")); 
   		 
   		// Document 오픈
   		document.open();
   		XMLWorkerHelper helper = XMLWorkerHelper.getInstance();
   		     
   		// CSS 내가 만든 HTML에 입힐 css를 만들어서 그걸 폴더안에 넣어놓으라는거 
   		CSSResolver cssResolver = new StyleAttrCSSResolver();
   		     
   		// HTML, 폰트 설정// 우리 배달의 민족 폰트 
   		XMLWorkerFontProvider fontProvider = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);
   		fontProvider.register("D:/A_TeachingMaterial/7.JspSpring/workEgov/ai/src/main/webapp/font/BMHANNA_11yrs_ttf.ttf", "bamin"); // MalgunGothic은 alias,
   		CssAppliers cssAppliers = new CssAppliersImpl(fontProvider);
   		 
   		
   		HtmlPipelineContext htmlContext = new HtmlPipelineContext(cssAppliers);
   		htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
   		 
   		// Pipelines
   		PdfWriterPipeline pdf = new PdfWriterPipeline(document, writer);
   		HtmlPipeline html = new HtmlPipeline(htmlContext, pdf);
   		CssResolverPipeline css = new CssResolverPipeline(cssResolver, html);
   		 
   		XMLWorker worker = new XMLWorker(css, true);
   		XMLParser xmlParser = new XMLParser(worker, Charset.forName("UTF-8"));
   		
   		
        Image image = Image.getInstance("C:/Users/PC-02/Desktop/newlogo.png");
        

        image.scaleAbsolute(200, 100);
        document.add(new Paragraph("                                        "));
        document.add(image);
   		
   		List<AllergyVO> memAll = memAllergyChart(member);
   		String[] str = member.getMemAddr1().split(" ");
   		
   		// 폰트 설정에서 별칭으로 줬던 "MalgunGothic"을 html 안에 폰트로 지정한다.
   		String htmlStr = "<html><head><body style='font-family: bamin;'>"  
   				  +"<p>안녕하세요. "+member.getMemName()+"님 저희 AI(Allergy Information)에 회원가입 해주셔서 감사합니다.</p>" +
   				  "<p>"+ member.getMemName() +"님이 회원가입시 작성해주신 지역,성별,나이를 토대로 회원님에게 발생확률이 높은 알레르기에 대한 정보를 회원가입 시 제공 해드리고 있습니다 .</p>"
   				  +"<p>회원님의 성별에는 "+memAll.get(0).getAllName()+" 의 발생 비율이 가장 높고&nbsp;</p>"+
   				  "<p>회원님의 지역인 "+str[0]+" 에서는 "+memAll.get(1).getAllName()+"의 발생비율이 높고&nbsp;</p>"+
   				  "<p>회원님의 나이인 "+member.getMemAge()+" 년생에는 "+memAll.get(2).getAllName()+" 에 대한 비율이 가장 높았습니다&nbsp;</p>" +
   				  
   				  "<p>이를 토대로 알레르기에 대한 예방법과 치료법 그리고 증상 등 알레르기에 대한 정보로는&nbsp;</p>"
   				  + "<p> ** "+memAll.get(0).getAllName()+"&nbsp;</p>" 
   				  + "<p> 예방법 : "+memAll.get(0).getAllPrevent()+"</p>"
   				  + "<p> 치료법 : "+memAll.get(0).getAllTherapy()+"</p><br /><br />"
   				  + "<p> ** "+memAll.get(1).getAllName()+"&nbsp;</p>" 
   	   			  + "<p>예방법 : "+memAll.get(1).getAllPrevent()+"</p>"
   	   			  + "<p>치료법 : "+memAll.get(1).getAllTherapy()+"</p><br /><br />"
   	   			  + "<p> ** "+memAll.get(2).getAllName()+"&nbsp;</p>" 
     	   		  + "<p>예방법 : "+memAll.get(2).getAllPrevent()+"</p>"
     	   		  + "<p>치료법 : "+memAll.get(2).getAllTherapy()+"</p>"
   				  + "</body></head></html>";
   			          
   		StringReader strReader = new StringReader(htmlStr);
   		
		xmlParser.parse(strReader);
   		 
   		document.close();
   		writer.close();
   		
   	}
   	
   	
    //회원가입시 REPORT보내기 
     public List<AllergyVO> memAllergyChart(MemberVO member) throws DocumentException, IOException {
 	   //회원의 성별에서 가장 많이 발생하는 알레르기 
     	AllergyVO allGender =  memChartService.selectGender(member);
     	
        //회원의 주소에서 가장 많이 발생하는 알레르기 
     	AllergyVO allAddr = memChartService.selectAddr(member);
     	
        //회원의 나이에서 가장 많이 발생하는 알레르기 
 	   	AllergyVO allAge = memChartService.selectAge(member);
     	
 	   	
     	String genderAllId = allGender.getAllId();
     	AllergyVO allergy1 = otherService.retrieveOthersAllergies(genderAllId);
     	
     	String addrAllId = allAddr.getAllId();
     	AllergyVO allergy2 = otherService.retrieveOthersAllergies(addrAllId);
     	
     	String ageAllId = allAge.getAllId();
     	AllergyVO allergy3 = otherService.retrieveOthersAllergies(ageAllId);
 	    
     	List<AllergyVO> allList = new ArrayList<>();
     	allList.add(allergy1);
     	allList.add(allergy2);
     	allList.add(allergy3);
     	
     	return allList;
     }
   
	public void sendEmail(MemberVO member) throws UnsupportedEncodingException {
		
		
		String host = "smtp.naver.com"; //네이버일경우
		 
		final String username="pojyd052"; //네이버아이디
		final String password="wlsl2012030083"; //네이버비밀번호
		
		Properties props = System.getProperties(); //정보를 달기위한 객체 생성
		
		//SMTP서버정보설정
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.auth", "true");
		
		//Session 생성
		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		});
	
		
		// Compose the message
		try {
			MimeMessage message = new MimeMessage(session);
			message.setFrom(new InternetAddress(username));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(member.getMemMail()));
			
			File saveFolder = new File("D:/saveFiles");
			String filename = saveFolder.getAbsolutePath();
	        BodyPart messageBodyPart = new MimeBodyPart();
	        Multipart multipart = new MimeMultipart();
	       
	        DataSource source = new FileDataSource(filename+"/"+member.getMemName() +" 회원님 PDF.pdf");
	        messageBodyPart.setDataHandler(new DataHandler(source));
	        messageBodyPart.setFileName(MimeUtility.encodeText(source.getName()));
	        multipart.addBodyPart(messageBodyPart);
	        
			// Subject 제목
			message.setSubject("안녕하세요.AI(Allergy Information)입니다. ");

			message.setContent(multipart);
			
			// send the message
			Transport.send(message);
			System.out.println("message sent successfully...");
//			MyAlert.info("결제내역이 이메일로 전송되었습니다.");

		} catch (MessagingException e) {
			e.printStackTrace();
		}
	}
	

}
