package kr.or.ddit.survey.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.formula.functions.T;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.co.shineware.nlp.komoran.constant.DEFAULT_MODEL;
import kr.co.shineware.nlp.komoran.core.Komoran;
import kr.co.shineware.nlp.komoran.model.KomoranResult;
import kr.co.shineware.nlp.komoran.core.Komoran;
import kr.co.shineware.nlp.komoran.model.KomoranResult;
import kr.co.shineware.nlp.komoran.model.Token;
import kr.or.ddit.survey.service.ISurveyService;
import kr.or.ddit.vo.ExampleVO;
import kr.or.ddit.vo.QuestionVO;
import kr.or.ddit.vo.SurveyResultVO;

@Controller
public class SurveyResultController {

	@Inject
	ISurveyService service;

	@RequestMapping("survey/surveyResult.do")
	public String surveyResult(@RequestParam int sur, Model model) {
		Set<QuestionVO> question = new HashSet<>();
		// List<QuestionVO> question = null;

		// 설문지 질문+보기 목록 출력
		List<ExampleVO> exampleList = service.selectExample(sur);

		// 설문지 질문별 답변 출력
		List<SurveyResultVO> list = service.selectSurveyResponse(sur);

		for (SurveyResultVO resultVO : list) {
			// 설문지 질문별 타입 확인
			// 1. 객관식
			if (resultVO.getQuestionVO().getQuestType().equals("example")) {
				for (ExampleVO vo : exampleList) {
					if (vo != null) {
						// 동일질문여부 확인
						if (resultVO.getQuestId().equals(vo.getQuestionId())) {
							// 질문선택여부 확인
							if (resultVO.getExamVO().getExamId() != null) {
								// 질문선택번호 확인
								if (resultVO.getExamVO().getExamId().equals(vo.getExamId())) {
									vo.setCheckCount(
											((vo.getCheckCount() + "").equals("") ? 0 : vo.getCheckCount()) + 1);
								}
							}
						}
					}
				}
			}

			// //2. 주관식
			else {
				// 형태소 분석을 위한 Komoran 객체 생성
				// Komoran komoran = new Komoran(DEFAULT_MODEL.FULL);

				if (resultVO.getTokenResult() != null) {
					// String tokenResult = resultVO.getTokenResult();

					// KomoranResult tokenResultList = komoran.analyze(tokenResult);
					// System.out.println("=================================================================");
					// System.out.println(tokenResult + " > 분석결과 > " + tokenResultList.getNouns());
					// System.out.println("-----------------------------------------------------------------");
					// System.out.println(tokenResult + " > 분석결과 > " +
					// tokenResultList.getMorphesByTags());
					// System.out.println("-----------------------------------------------------------------");
					// System.out.println(tokenResult + " > 분석결과 > " +
					// tokenResultList.getPlainText());
					// System.out.println("-----------------------------------------------------------------");
					// System.out.println(tokenResult + " > 분석결과 > " + tokenResultList.getList());
					// System.out.println("-----------------------------------------------------------------");
					// System.out.println(tokenResult + " > 분석결과 > " );
					// List<Token> tokenList = tokenResultList.getTokenList();
					// for (Token token : tokenList) {
					// System.out.format("(%2d, %2d) %s/%s\n", token.getBeginIndex(),
					// token.getEndIndex(), token.getMorph(), token.getPos());
					// }
					//
					//// System.out.println("=================================================================");
					// System.out.println(tokenResultList.getNouns());
					// System.out.println(tokenResultList.getPlainText());
					// System.out.println();

				}
			}

			// 질문 리스트 만들어 버리기
			QuestionVO qvo = new QuestionVO();
			qvo.setQuestId(resultVO.getQuestionVO().getQuestId());
			qvo.setQuestCont(resultVO.getQuestionVO().getQuestCont());
			qvo.setQuestType(resultVO.getQuestionVO().getQuestType());
			qvo.setSurveyId(resultVO.getSurveyVO().getSurId());
			question.add(qvo);
		}
		// 객관식 확인
		for (ExampleVO vo : exampleList) {
			if (vo != null) {
				System.out.println("질문ID : " + vo.getQuestionId() + "\t보기 : " + vo.getExamCont() + "\t선택개수 : "
						+ vo.getCheckCount());
			}
		}
		// 질문 목록 만들어서 정렬
		List<QuestionVO> quest = new ArrayList<>(question);
		quest.sort(new Comparator<QuestionVO>() {

			@Override
			public int compare(QuestionVO o1, QuestionVO o2) {
				int one = Integer.parseInt(o1.getQuestId());
				int two = Integer.parseInt(o2.getQuestId());
				if (one == two)
					return 0;
				else if (one > two)
					return 1;
				else
					return -1;
			}
		});

		// 답변 리스트 빈 값 지우기
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < exampleList.size(); j++) {
				if (exampleList.get(j) == null) {
					exampleList.remove(j);
				}
			}
		}

		for (ExampleVO questionVO : exampleList) {
			System.out.println(questionVO);
		}

		// 질문 안에 답변 넣기
		for (int i = 0; i < quest.size(); i++) {
			List<ExampleVO> ex = new ArrayList<>();
			for (int j = 0; j < exampleList.size(); j++) {
				if (quest.get(i).getQuestId() != null) {
					if (exampleList.get(j) != null) {
						if (StringUtils.isNotBlank(exampleList.get(j).getQuestionId())) {
							if (quest.get(i).getQuestId().equals(exampleList.get(j).getQuestionId())) {
								ex.add(exampleList.get(j));
								quest.get(i).setExampleList(ex);
							}
						}
					}
				}
			}
		}

		// 질문 안에 주관식 넣기
		for (int j = 0; j < quest.size(); j++) {// 질문 리스트
			List<String> plain = new ArrayList<>();
			for (int i = 0; i < list.size(); i++) {// 전체 결과 리스트
				if (list.get(i).getTokenResult() != null) {
					if (list.get(i).getQuestionVO().getQuestType().equals("token")) {
						if (quest.get(j).getQuestId().equals(list.get(i).getQuestionVO().getQuestId())) {
							plain.add(list.get(i).getTokenResult());
						}
					}
				}
			}
			if (quest.get(j).getQuestType().equals("token")) {
				quest.get(j).setPlainTokenResult(plain);
			}
		}

		for (QuestionVO surveyResultVO : quest) {
			System.out.println(surveyResultVO);
			System.out.println(surveyResultVO.getPlainTokenResult());
			System.out.println();
		}
		if (list.size()!=0) {
			model.addAttribute("SubName", list.get(0).getSurveyVO().getSubName());
		}
		model.addAttribute("exampleList", exampleList);
		model.addAttribute("quest", quest);
		return "survey/surveyResult";
	}
}
