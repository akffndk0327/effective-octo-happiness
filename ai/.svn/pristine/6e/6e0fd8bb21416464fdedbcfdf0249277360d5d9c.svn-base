package kr.or.ddit.correctboard.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.correctboard.dao.ICorrectAttatchDAO;
import kr.or.ddit.correctboard.dao.ICorrectBoardDAO;
import kr.or.ddit.enums.ServiceResult;
import kr.or.ddit.vo.CodeVO;
import kr.or.ddit.vo.CorrectAttatchVO;
import kr.or.ddit.vo.CorrectBoardVO;
import kr.or.ddit.vo.PagingInfoVO;

@Service
public class CorrectBoardServiceImp implements ICorrectBoardService{

	@Inject
	ICorrectBoardDAO dao;
	@Inject
	ICorrectAttatchDAO attatchDAO;
	
	File saveFolder = new File("d:/saveFiles");
	private int processAttatche(CorrectBoardVO vo) {
		List<CorrectAttatchVO> attatchList = vo.getAttatchList();
		int cnt = 0;
		if(attatchList!=null&& attatchList.size()>0) {
			cnt = attatchDAO.createCorrectAttatch(vo);
			for(int i=0;i<attatchList.size();i++) {
				try {
					CorrectAttatchVO attatch = attatchList.get(i);
					attatch.saveFile(saveFolder);
				}catch(IOException  e) {
					e.printStackTrace();
				}
			}
		}
		return cnt;
	}
	
	private int deleteAttatch(CorrectBoardVO vo) {
		Integer[] delAtts = vo.getDelAttaches();
		int cnt = 0;
		if(delAtts!=null && delAtts.length>0) {
			for(int delNo : delAtts) {
				CorrectAttatchVO attatch = attatchDAO.selectAttatch(delNo);
				FileUtils.deleteQuietly(
						new File(saveFolder,attatch.getCoattSavename()));
			}
			cnt += attatchDAO.deleteAttatch(vo);
		}
		return cnt;
	}
	
	
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ServiceResult createCorrectBoard(CorrectBoardVO vo) {
		ServiceResult result = null;
		int cnt = dao.createCorrectBoard(vo);
		cnt += processAttatche(vo);
		if(cnt>0) result = ServiceResult.OK;
		else result = ServiceResult.FAILED;
		
		return result;
	}


	@Override
	public CorrectBoardVO selectCorrect(CorrectBoardVO vo) {
		return dao.selectCorrect(vo);
	}

	@Override
	public int selectCorrectCount(PagingInfoVO<CorrectBoardVO> pagingVO) {
		return dao.selectCorrectCount(pagingVO);
	}

	@Override
	public List<CorrectBoardVO> selectCorrectList(PagingInfoVO<CorrectBoardVO> pagingVO) {
		return dao.selectCorrectList(pagingVO);
	}

	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ServiceResult deleteCorrect(CorrectBoardVO vo) {
		CorrectBoardVO correct = selectCorrect(vo);
		ServiceResult result = null;
		
		if(correct.getCorrectPw()==vo.getCorrectPw()) {
			List<CorrectAttatchVO> attatchList = correct.getAttatchList();
			int cnt = 0;
			if(attatchList!=null && attatchList.size()>0) {
				cnt += attatchDAO.deleteAttatch(vo);
			}
			
			cnt += dao.deleteCorrect(vo);
			if(cnt>0) {
				if(attatchList!=null) {
					for(CorrectAttatchVO attatch : attatchList) {
						FileUtils.deleteQuietly(
								new File(saveFolder,attatch.getCoattSavename()));
						
					}
				}
				result = ServiceResult.OK;
			}else {
				result = ServiceResult.FAILED;
			}
		}else {
			result= ServiceResult.INVALIDPASSWORD;
		}
		
		return result;
	}

	@Override
	public List<CodeVO> selectCodeList() {
		return dao.selectCodeList();
	}

}
