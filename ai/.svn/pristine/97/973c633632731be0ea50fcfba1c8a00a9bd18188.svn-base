
$(document).ready(function() {
   //회원분류
   $(".authorId").on("click", function(){
      if($(this).val()=="ROLE_MEM"){
         $("#memForm").css("display", "block");
         $("#comForm").css("display", "none");
         
      }else{
         $("#memForm").css("display", "none");
         $("#comForm").css("display", "block");
         
      }
      
   })
   
   
   //알러지유무
   $(".memAll").on("click", function(){
      if($(this).val()=="해당없음"){
         $("#allForm").css("display", "none");
      }else{
         $("#allForm").css("display", "block");
      }
   })
   
//    $('#contact_form').bootstrapValidator({
        // To use feedback icons, ensure that you use Bootstrap v3.1.0 or later
//        feedbackIcons: {
//            valid: 'fa fa-check',
//            invalid: 'fa fa-times',
//            validating: 'glyphicon glyphicon-refresh'
//        },
//        fields: {
//            memId: {
//                validators: {
//                        notEmpty: {
//                        message: '아이디를 입력해주세요.'
//                    },
//                    regexp:{
//                    	regexp:  /^[a-z]+[a-z0-9]{5,19}$/g,
//                       message: '아이디는 영문자,숫자로 6자이상 20자 이하로 입력하세요.'
//                    }
//                }
//            },
//            memPass: {
//                validators: {
//                        notEmpty: {
//                        message: '비밀번호를 입력해주세요.'
//                    },
//                    regexp:{
//                    	regexp: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,15}$/,
//                    	message : '특수문자 ,문자, 숫자 포함 형태의 8~16자리 이내로 입력해주세요.'
//                    }
//                }
//            },
//            memName: {
//                validators: {
//                        notEmpty: {
//                        message: '이름을 입력해주세요.'
//                    },
//                    regexp:{
//                    	regexp: /^[가-힣]{2,4}$/,
//                        message: '이름은 2자 이상 5자 이하로 한글만 입력하세요.'
//                     }
//                }
//            },
//            
//            memMail: {
//                validators: {
//                    notEmpty: {
//                        message: '이메일을 입력해주세요.'
//                    },
//                    regexp: {
//                    	regexp : /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i,
//                        message: '유효하지 않은 이메일 주소 입니다.'
//                    }
//                }
//            },
//            
//            memTel: {
//            	validators: {
//            		notEmpty: {
//            			message: '휴대전화 번호를 입력해주세요.'
//            		},
//            		regexp: {
//            			regexp : /^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/,
//            			message: '유효하지 않은 휴대전화 번호 입니다.'
//            		}
//            	}
//            },
//            
//            memZip: {
//                validators: {
//                    notEmpty: {
//                        message: '주소를 입력해주세요.'
//                    },
//                }
//            },
//            
//            verify: {
//            	validators: {
//            		notEmpty: {
//                        message: '인증번호를 입력하세요.'
//                    },
//                    regexp:{
//                    	regexp : /^34$/g,
//                    	message : '잘못된 인증번호 입니다. '
//                    }
//            	}
//            }
//            
//        	}
//        });
});

//주소api
function sample6_execDaumPostcode() {
    new daum.Postcode({
        oncomplete: function(data) {
            // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

            // 각 주소의 노출 규칙에 따라 주소를 조합한다.
            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수

            //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
            if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
                addr = data.roadAddress;
            } else { // 사용자가 지번 주소를 선택했을 경우(J)
                addr = data.jibunAddress;
            }

            // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.
            if(data.userSelectedType === 'R'){
                // 법정동명이 있을 경우 추가한다. (법정리는 제외)
                // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){
                    extraAddr += data.bname;
                }
                // 건물명이 있고, 공동주택일 경우 추가한다.
                if(data.buildingName !== '' && data.apartment === 'Y'){
                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                }
                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
                if(extraAddr !== ''){
                    extraAddr = ' (' + extraAddr + ')';
                }
                // 조합된 참고항목을 해당 필드에 넣는다.
                document.getElementById("sample6_extraAddress").value = extraAddr;
            
            } else {
                document.getElementById("sample6_extraAddress").value = '';
            }

            // 우편번호와 주소 정보를 해당 필드에 넣는다.
            document.getElementById('sample6_postcode').value = data.zonecode;
            document.getElementById("sample6_address").value = addr;
            // 커서를 상세주소 필드로 이동한다.
            document.getElementById("sample6_detailAddress").focus();
        }
    }).open();
    

    
}