<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-lazy-init="true"
	>
	
<!-- 	스프링 컨테이너 사용단계 -->
<!-- 	1. 컨테이널 구성 모듈의 추가 (spring-context: core, context, bean,el) -->
<!-- 	2. spring bean configuration file( bean metadata config file ) 생성 -->
<!-- 		1) 컨테이너가 관리할 객체(bean) 등록, class, id... 이게 객체가 아님. 부가적인 속성임(메타데이터라고 부름) -->
<!-- 		2) 등록되있는 객체들간의 의존관계 형성함 (**DI : Dependency Injection) -->
<!-- 	3. 어플리케이션 시작 시점에서 컨테이너 객체 생성(new) -->
<!-- 	4. 컨테이너로부터 필요 객체 주입(getBean) -->
<!-- 	5. 사용 종료시 close -->
		
		
<!-- 	** 의존관계 형성방법 (DI 종류) -->
<!-- 	1. setter Injection 밑에 service1예시 하는거  : property, p-->
<!-- 	2. constructor Injection(생성자) idol에서 함  : constructor-arg, c -->
<!-- 	** 컨테이너의 종류 -->
<!-- 	0. BeanFactory  -->
<!-- 	1. ApplicationContext -->
<!-- 	2. ConfigurableApplicationContext 요즘쓰는ㄱ ㅓ 3개다 standAlone 형--> 
<!-- 		1) ClassPathXmlApplicationContext -->
<!-- 		2) GenericXmlApplicationContext("classpath/file/http:context.xml") generic : 고정된게 없다 prefix따라 xml위치 동적을 ㅗ바꿀수있어 -->
<!-- 		   Smart Resource Loader 가 동작하므로, -->
<!-- 			classpath: -->
<!-- 			file: -->
<!-- 		  접두어를 통해 동적으로 리소스를 검색하고 로딩함. -->
<!-- 		3)AnnotationConfigApplicationContext(5.x fix)  : xml없어짐 -->
<!-- 	3.WebApplicationContext : 웹 어플용 -->
	
<!-- 	컨테이너의 빈 관리 특성 -->
<!-- 	1.특별한 설정이 없느 ㄴ한 singleton : scope  하나의빈은 하나으 ㅣ객체만 만들어진다  -->
<!-- 			1) singleton : 빈을 대상으로 객체를 하나만 운영 -->
<!-- 			2)prototype : 주입시점에 주입될때마다 새로운 객체 생성 	 -->
<!-- 			3)session/request : only web, 리쿼스트스코프에 빈을 넣어. 하나의 세션안에서만 유효한 빈 만들어 ex) 로그인 햇을때 ㅣ: session -->
<!-- 	2. 특별한 설정이 없느 ㄴ한 모든 빈의 객체를 일시에 생성 --> 
<!-- 메모리낭비, 부하 를 위해서 lazy-init -->
<!-- 		3. 빈의 객체 생성 순서 : depends-on="선행생성객체만듬" -->
<!-- 		** 빈객체의 생성순서 : scope(prototype : 주입될때 생성지점 밀림,), lazy-init, depends-on : 누구다음에 누구로 생성됨.  -->


	<bean init-method="init" lazy-init="false" id ="mySqlDAO" class="kr.or.ddit.idol.dao.IdolSearchDAO_Mysql"></bean>
	
	<bean id="service1" class="kr.or.ddit.idol.service.IdolSearchServiceImpl">
<!-- 		service1.setDao(new IdolSearchDAO_Mysql()); -->
		<property name="dao" ref="mySqlDAO"/>
	</bean>
	
	<bean id="service2" class="kr.or.ddit.idol.service.IdolSearchServiceImpl">
		<constructor-arg name="dao" ref="mySqlDAO"/>
	</bean>
	
	<bean id="service3" class="kr.or.ddit.idol.service.IdolSearchServiceImpl" 
		p:dao-ref="mySqlDAO"
	/>
	<bean id="service4" class="kr.or.ddit.idol.service.IdolSearchServiceImpl" 
		c:dao-ref="mySqlDAO"
	/>
	
		
		
		 
</beans>
